# -*- coding: utf-8 -*-
"""Movie Recommender system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XMcSnp7TW-hz40OQA9mlN7AEmnw-2fmG

##Load Datasets
"""

#Import necessary libraries
import numpy as np
import pandas as pd

#Load the data
movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

"""##Data Preprocessing"""

movies.head()

#Merge the 'movies' and 'credits' DataFrames using the 'title' column as the common key
movies = movies.merge(credits,on='title')

# Select only the relevant columns from the merged DataFrame for further analysis
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head()

movies.shape

credits.head()

credits.shape

# Import the 'ast' module to safely evaluate string representations
import ast

# Define a function to extract the 'name' values from a string representation of a list of dictionaries
def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name'])
    return L

movies.dropna(inplace=True)

# Apply the 'convert' function to each entry in the 'genres' column to transform string representations into lists of genre names
movies['genres'] = movies['genres'].apply(convert)
movies.head()

# Apply the 'convert' function to each entry in the 'keywords' column to transform string representations into lists of keywords names
movies['keywords'] = movies['keywords'].apply(convert)
movies.head()

# This returns a list of dictionaries containing movie genre information
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

# Define a function to extract up to three 'name' values
def convert3(text):
    L = []
    counter = 0
    for i in ast.literal_eval(text):
        if counter < 3:
            L.append(i['name'])
        counter+=1
    return L

# Extract the list of actor names from the string representation
movies['cast'] = movies['cast'].apply(convert)
movies.head()

# Keep only the first three cast members from each list in the 'cast' column
movies['cast'] = movies['cast'].apply(lambda x:x[0:3])

# Define a function to extract the director(s) from list of crew dictionaries
def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

# Extract the director(s) from the crew information
movies['crew'] = movies['crew'].apply(fetch_director)

movies.sample(5)

# Remove spaces from each string in a list
def collapse(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

# Remove spaces from each element in the respective columns
movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)
movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)

movies.head()

movies['overview'] = movies['overview'].apply(lambda x:x.split())

# Merges overview words, genres, keywords, cast, and crew into one list for text-based analysis
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

new = movies[['movie_id','title','tags']]
new['tags'] = new['tags'].apply(lambda x: " ".join(x))
new.head()

"""#Text Vectorization using CountVectorizer"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vector = cv.fit_transform(new['tags']).toarray()

vector.shape

# Compute Cosine Similarity Between Movies
from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vector)
similarity

# Find the index of the movie titled 'The Lego Movie' in the DataFrame
new[new['title'] == 'The Lego Movie'].index[0]

# Movie Recommendation Function
def recommend(movie):
    index = new[new['title'] == movie].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:
        print(new.iloc[i[0]].title)

recommend('Gandhi')

# Save Processed Data and Similarity Matrix Using Pickle
import pickle
pickle.dump(new,open('movie_list.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))